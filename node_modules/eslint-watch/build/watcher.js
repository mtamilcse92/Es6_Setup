'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = watcher;

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _eslint = require('eslint');

var _eslint2 = _interopRequireDefault(_eslint);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = (0, _logger2.default)('watcher');

logger.debug('Loaded');

var events = { change: 'change' };
var chokidarOptions = {
  ignored: /\.git|node_modules|bower_components/
};
var cliOptionProperties = ['config', 'eslintrc', 'ext', 'parser', 'cache', 'cacheLocation', 'ignore', 'ignorePath', 'ignorePattern', 'fix', 'parserOptions', 'global', 'format'];
var cliOptionMap = {
  config: 'configFile',
  eslintrc: 'useEslintrc',
  ext: 'extensions',
  cacheFile: 'cacheLocation'
};

function filterWarnings(results) {
  return _lodash2.default.reduce(results, function (curr, result) {
    if (result.warningCount) {
      var newResult = _lodash2.default.omit(result, 'messages');
      newResult.messages = _lodash2.default.find(result.messages, function (m) {
        return m.severity > 1;
      });
      curr.push(newResult);
      return curr;
    }
    curr.push(result);
    return curr;
  }, []);
}

///https://github.com/eslint/eslint/blob/233440e524aa41545b66b2c3c7ca26fe790e32e0/tests/lib/cli-engine.js#L105-L107

function watcher(options) {
  var cliOptions = (0, _lodash2.default)(options).pick(cliOptionProperties).reduce(function (result, value, key) {
    key = cliOptionMap[key] || key;
    result[key] = value;
    return result;
  }, {});
  logger.debug(cliOptions);
  logger.debug(options);
  var cli = new _eslint2.default.CLIEngine(cliOptions);

  // replace \ with / for Windows compatibility
  var formatterPath = cliOptions.format.replace(/\\/g, '/');

  // copied from eslint - if the path has a slash, it's a file.
  if (formatterPath.indexOf('/') > -1) {
    var cwd = process.cwd();

    formatterPath = _path2.default.resolve(cwd, formatterPath);
  } else {
    formatterPath = `./formatters/${formatterPath}`;
  }

  logger.debug('Trying to load formatter for re-lint from ' + formatterPath);

  var formatter = void 0;
  try {
    formatter = require(formatterPath);
  } catch (ex) {
    ex.message = `There was a problem loading formatter: ${formatterPath}\nError: ${ex.message}`;
    // Cannot proceed with re-linting if we don't have a formatter.
    throw ex;
  }

  function lintFile(path) {
    logger.debug('lintFile: %s', path);
    var report = cli.executeOnFiles(path);
    if (options.fix) {
      _eslint2.default.CLIEngine.outputFixes(report);
    }
    var results = _settings2.default.cliOptions.quiet ? filterWarnings(report.results) : report.results;
    logger.log(formatter(results));
  }

  function isWatchableExtension(filePath, extensions) {
    logger.debug(filePath, extensions);
    if (extensions) {
      return _lodash2.default.includes(extensions, _path2.default.extname(filePath));
    }

    // Use the ESLint default extension, if none is provided
    return _lodash2.default.includes(cli.options.extensions, _path2.default.extname(filePath));
  }
  var watchDir = options._.length ? options._ : [_path2.default.resolve('./')];

  _chokidar2.default.watch(watchDir, chokidarOptions).on(events.change, function changeEvent(path) {
    logger.debug('Changed:', path);
    if (!cli.isPathIgnored(path) && isWatchableExtension(path, options.ext)) {
      var watchPath = options.changed ? [path] : watchDir;
      lintFile(watchPath);
    }
  }).on('error', logger.error);

  logger.debug('Watching: %o', watchDir);
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,